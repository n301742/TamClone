# PROJECT OVERVIEW

- This is a modern web application built with Vue 3, Vite, and TypeScript, following best practices and a modular architecture.
- We are using Tailwind CSS for styling as well as PrimeVue v4 components. Please always check on the website https://primevue.org/ for the components and their documentation and don't use deprecated components.
- We are bulding a web platform to upload letters in pdf format
- The letters are scanned by a AI to extract address metadata
- The metadata is used to forward the letter to a webservice that is able to send the letter to the right address (https://developers.briefbutler.com)
- All documents are in DIN A4 format
- The postitioning of the address is important and should be at the top right corner of the document's first page
- The Document's frist page follows the DIN 676 Type A standard
- Only metadata in the address window is important, the rest of the document is not important for address extraction

# PRIMEVUE V4 GUIDELINES

## Component Changes
- Use the new component names: DatePicker (not Calendar), Select (not Dropdown), ToggleSwitch (not InputSwitch), Popover (not OverlayPanel), Drawer (not Sidebar)
- Avoid deprecated components: Chips (use AutoComplete with multiple), TabMenu (use Tabs without panels), Steps (use Stepper), InlineMessage (use Message), TabView (use Tabs)
- Use the new Accordion with AccordionHeader and AccordionContent components
- Use the Badge component instead of BadgeDirective

## Styling Approach
- PrimeVue v4 uses CSS variables instead of SASS for theming
- Do not import theme.css or resources from primevue/resources (these no longer exist)
- Use the new design token-based architecture for theming
- For dark mode, use the new APIs like usePreset instead of switchTheme
- If using PrimeFlex, ensure it's v4 (PrimeFlex v3 is not compatible with PrimeVue v4)

## API Changes
- Import from @primevue/core/api instead of primevue/api
- Use the pc prefix for PT sections when a component uses another PrimeVue component
- Sidebar/Drawer no longer has a size property - use responsive utility classes instead
- Rating no longer has a cancel prop - toggling the selected star clears it
- Inplace no longer has closable - use templating and closeCallback prop instead

## Best Practices
- Use auto imports with tree-shaking for optimal bundle size
- Implement proper accessibility with ARIA roles and attributes
- Use the new Pass Through (PT) API for customizing components
- Leverage the Fluid component or fluid property for responsive layouts
- Never hardcode any special cases always find a generic solution
- Use the new Tailwind CSS presets for PrimeVue v4 if using Tailwind

# BACKEND TECHNOLOGY STACK

- Express.js for the REST API framework
- TypeScript for type safety and better developer experience
- Prisma as the ORM for database interactions
- PostgreSQL for the database
- JWT for authentication tokens
- Passport.js for authentication strategies (Google OAuth, local username/password)
- Zod for request validation
- Jest for testing
- Future consideration: Add 2FA support

# AUTHENTICATION STRATEGY

- Primary: Google OAuth for seamless login experience
- Secondary: Username/password with proper hashing (bcrypt)
- JWT tokens for maintaining sessions
- Role-based access control for different user types
- Secure HTTP-only cookies for token storage
- CSRF protection for form submissions

# DATABASE SCHEMA

## User Data
- Basic information: first name, last name, email, mobile number
- Authentication details: password hash (for local auth), OAuth provider info
- User preferences: UI settings, notification preferences
- Billing information: payment methods, billing address, subscription details
- Document retention settings: number of days to keep PDF files (default: 30 days)
- Role and permissions data

## Letter Storage
- Letter metadata: tracking ID, delivery ID, status, timestamps
- PDF storage: temporary storage of uploaded PDF files
- PDF retention: files will be automatically deleted after the user-specified retention period
- Status tracking: integration with BriefButler API status endpoints
- Document references: links to related documents (return receipts, etc.)

## BriefButler API Integration
- Status tracking using the BriefButler Status API (v2.5.0)
- Status codes and their meanings as defined in the API documentation
- Document retrieval for return receipts and other related documents
- Tracking of delivery status (delivered, received, processing, etc.)

# FRONTEND STRUCTURE

## Layout
- Sidebar navigation for main application sections
- Top bar with dark/light mode toggle, user profile, and settings access
- Responsive design with mobile-first approach
- PrimeVue components with Tailwind CSS customization

## Pages/Views
1. **Dashboard**
   - Overview of recent letters and their status
   - Quick statistics and activity summary
   - Action buttons for common tasks

2. **Letter Upload**
   - PDF upload interface with drag-and-drop support
   - Preview of extracted recipient data
   - Form to correct/edit extracted address information
   - Confirmation and submission flow

3. **History & Status**
   - List of all sent documents with filtering options
   - Detailed status information for each letter
   - Access to return receipts and related documents
   - Status timeline visualization

4. **Settings**
   - User profile management
   - Notification preferences
   - Document retention settings
   - Billing and subscription management
   - Theme preferences (dark/light mode)

5. **Admin Dashboard** (for admin users)
   - User management
   - System statistics
   - Configuration settings

# DEPLOYMENT STRATEGY

- Self-hosted deployment without Docker
- Environment-specific configuration files
- Automated build process with npm scripts
- Separate environments for development, staging, and production
- Database migration scripts for version control
- Backup and restore procedures
- Monitoring and logging setup

# TESTING STRATEGY

## Backend Testing
- Jest for unit and integration testing
- Test coverage targets: minimum 70% coverage
- API endpoint testing with supertest
- Database testing with an isolated test database
- Authentication and authorization testing

## Frontend Testing
- Vitest for unit testing Vue components
- Component testing with Vue Test Utils
- End-to-end testing with Cypress (optional)
- Accessibility testing

## API Testing
- Postman for manual API testing and documentation
- Automated API tests with Jest
- Contract testing between frontend and backend

# SECURITY MEASURES

## File Upload Security
- File type validation (only accept PDF)
- File size limits (e.g., max 10MB)
- Virus/malware scanning before processing
- Secure storage with randomized filenames
- Proper file permissions on the server
- Content-Disposition headers for downloads
- Rate limiting for uploads
- MIME type verification
- Metadata stripping before storage

## General Security
- HTTPS for all communications
- Input validation on all forms
- Output encoding to prevent XSS
- CSRF protection
- Rate limiting for API endpoints
- Security headers (Content-Security-Policy, X-Content-Type-Options, etc.)
- Regular security audits
- Dependency vulnerability scanning

# PERSONALITY

- You are an expert in TypeScript, Node.js, Vite, Vue.js, Vue Router, Pinia, VueUse, PrimeVue v4, and Tailwind, with a deep understanding of best practices and performance optimization techniques in these technologies.
  
## Code Style and Structure
- Write concise, maintainable, and technically accurate TypeScript code with relevant examples.
- Use functional and declarative programming patterns; avoid classes.
- Favor iteration and modularization to adhere to DRY principles and avoid code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Organize files systematically: each file should contain only related content, such as exported components, subcomponents, helpers, static content, and types.
  
## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for functions.
 
## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types for their extendability and ability to merge.
- Avoid enums; use maps instead for better type safety and flexibility.
- Use functional components with TypeScript interfaces.
  
## Syntax and Formatting
- Use the "function" keyword for pure functions to benefit from hoisting and clarity.
- Always use the Vue Composition API script setup style.
  
## UI and Styling
- Use PrimeVue v4 for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
## Performance Optimization
- Leverage VueUse functions where applicable to enhance reactivity and performance.
- Wrap asynchronous components in Suspense with a fallback UI.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Implement an optimized chunking strategy during the Vite build process, such as code splitting, to generate smaller bundle sizes.
   
# ERROR FIXING PROCESS

- If you are not sure about something, ask the user for clarification.
- If you are not sure about the user's instructions, ask the user for clarification.
- If you are not sure about the code, ask the user for clarification.
- If you are not sure about the project structure, ask the user for clarification.

# user authentication

- The user is authenticated via Google OAuth
- Secondary authentication via username/password
- The user can only access the application if they are authenticated
- Future consideration: Add 2FA support

# database

- The database is a PostgreSQL database
- The database is used to store the user's data including:
  - Personal information (first name, last name, email, mobile number)
  - User preferences and settings
  - Billing information
- The database is used to store sent letters. These letters are stored in the table 'letters' and we want to keep track of:
  - Letter ID
  - Tracking ID (from BriefButler API)
  - Date of sending
  - Date of delivery
  - Current status (using BriefButler status codes)
  - Status history
  - Document retention period (default: 30 days)
- PDF files are stored temporarily and deleted after the user-specified retention period

# letter processing

- The letter is processed by an AI to extract address metadata
- The metadata is used to forward the letter to a webservice that is able to send the letter to the right address (https://developers.briefbutler.com)
- Status updates are retrieved from the BriefButler Status API (v2.5.0)
- The application tracks delivery status using the tracking ID or delivery ID + profile ID
- Return receipts and other documents can be retrieved from the BriefButler API when available

# PROJECT STRUCTURE

I would like to implement a backend with APIs which are then called by our frontend. We want to stay flexible and implement more functionality when needed.

├── backend/
│   ├── src/
│   │   ├── config/
│   │   ├── controllers/
│   │   ├── middleware/
│   │   ├── models/
│   │   ├── routes/
│   │   ├── services/
│   │   ├── utils/
│   │   └── app.ts
│   ├── prisma/
│   │   └── schema.prisma
│   ├── package.json
│   └── tsconfig.json
├── frontend/
│   ├── src/
│   │   ├── assets/
│   │   ├── components/
│   │   │   ├── common/
│   │   │   ├── dashboard/
│   │   │   ├── layout/
│   │   │   ├── letter-upload/
│   │   │   ├── history/
│   │   │   └── settings/
│   │   ├── composables/
│   │   ├── router/
│   │   ├── stores/
│   │   ├── types/
│   │   ├── utils/
│   │   ├── views/
│   │   ├── App.vue
│   │   └── main.ts
│   ├── package.json
│   └── vite.config.ts

# IMPLEMENTATION PLAN

Phase 1: Initial Setup

1. Set up backend project structure with Express.js and TypeScript
2. Set up frontend project with Vue 3, Vite, and TypeScript
3. Configure Prisma with PostgreSQL
4. Set up basic API endpoints and testing infrastructure

Phase 2: Authentication

1. Implement Google OAuth
2. Implement username/password authentication
3. Create secure session management with JWT
4. Set up role-based access control

Phase 3: User Interface

1. Create layout components (sidebar, topbar)
2. Implement dashboard view
3. Create user settings pages
4. Implement dark/light mode toggle

Phase 4: Letter Processing

1. Implement PDF upload and validation
2. Integrate with address extraction AI
3. Create interface for editing extracted address data
4. Connect to BriefButler API for letter sending
5. Implement status tracking and notifications

Phase 5: User Management

1. Create user profile management
2. Implement billing and subscription features
3. Add document retention settings
4. Develop admin dashboard for user management

Phase 6: Testing and Deployment

1. Write comprehensive tests for backend and frontend
2. Set up CI/CD pipeline
3. Configure production environment
4. Create documentation for deployment and maintenance